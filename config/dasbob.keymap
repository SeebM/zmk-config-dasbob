#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>



/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };
    };

    macros {
        repeat: repeat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2 &kp NUMBER_4 &kp NUMBER_2 &kp NUMBER_4 &kp NUMBER_2 &kp NUMBER_4>;
            label = "REPEAT";
        };

        snip: snip {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHFT &kp LEFT_GUI &kp S>;
            label = "SNIP";
        };

        lock: lock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp L>;
            label = "LOCK";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // This is a sample keymap intended to be replaced with your own

        Base {
            bindings = <
&kp P       &kp V        &kp K          &kp C           &kp SLASH   &kp NUHS   &kp H       &kp G       &kp F       &kp Q
&kp U       &hm LALT I   &hm LSHFT A    &hm LCTRL E     &kp O       &kp D       &hm LCTRL N &hm LSHFT R &hm LALT T  &kp S
&hm LGUI X  &kp Z        &kp Y          &kp L           &kp DOT     &kp COMMA   &kp M       &kp B       &kp W       &hm LGUI J 
                        &kp LGUI        &lt 1 SPACE   &lt 2 ENTER &lt 1 TAB   &lt 3 BSPC  &kp LALT
            >;
        };

        Num {
            bindings = <
&kp F1       &kp F2        &kp F3          &kp F4           &kp F5   &kp F6         &kp F7       &kp F8       &kp F9       &kp F10
&kp N1       &hm LALT N2   &hm LSHFT N3    &hm LCTRL N4     &kp N5   &kp N6         &hm LCTRL N7 &hm LSHFT N8 &hm LALT N9  &kp N0
&kp LS(NUHS) &kp RA(N7)    &kp RA(8)       &kp LS(8)        &kp FSLH &kp LS(FSLH)   &kp LS(N9)   &kp RA(N9)   &kp RA(N0)   &kp LS(N2) 
                            &trans   &trans  &trans  &trans   &trans   &trans
            >;
        };

        Nav {
            bindings = <
&kp TAB     &kp HOME     &kp UP        &kp END        &trans       &kp GRAVE    &kp LS(N2)          &kp LS(N4)          &kp RA(E)             &kp RA(NUBS)
&kp DEL     &kp LEFT     &kp DOWN      &kp RIGHT      &kp LC(S)    &kp LS(N0)   &hm LCTRLT KP_PLUS  &hm LSHIFT KP_MINUS &hm LALT KP_ASTERISK  &kp KP_SLASH
&kp LC(Y)   &kp LC(X)    &kp LC(C)     &kp LC(V)      &kp NUBS     &kp LS(NUBS) &kp LS(N7)          &kp RA(MINUS)       &TG RA(RBKT)          &tog 4
                                         &trans                 &trans            &kp LSHFT          &trans            &trans     &trans
            >;
        };

        DE {
            bindings = <
&trans      &trans  &trans  &trans      &trans      &bt BT_CLR      &trans  &trans  &trans  &kp RA(Q)
&kp RBKT    &trans  &kp SQT &kp RA(E)   &kp SEMI    &out OUT_TOG    &trans  &trans  &trans  &kp MINUS
&trans      &trans  &trans  &trans      &trans      &trans          &trans  &trans  &trans  &trans
                    &trans  &trans      &trans      &trans          &trans  &trans
            >;
        };
        GAME {
            bindings = <
&kp TAB     &kp HOME     &kp UP        &kp END        &trans       &kp GRAVE    &kp LS(N2)          &kp LS(N4)          &kp RA(E)             &kp RA(NUBS)
&kp DEL     &kp LEFT     &kp DOWN      &kp RIGHT      &kp LC(S)    &kp LS(N0)   &hm LCTRLT KP_PLUS  &hm LSHIFT KP_MINUS &hm LALT KP_ASTERISK  &kp KP_SLASH
&kp LC(Y)   &kp LC(X)    &kp LC(C)     &kp LC(V)      &kp NUBS     &kp LS(NUBS) &kp LS(N7)          &kp RA(MINUS)       &TG RA(RBKT)          &tog 4
                                         &trans                 &trans            &kp LSHFT          &trans            &trans     &trans
            >;
        };

    };
};
