#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>


#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
};

/ {
    behaviors {
        
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            //flavor = "hold-preferred";
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <130>;
            //quick-tap-ms = <100>;
            hold-while-undecided;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };
        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            //flavor = "hold-preferred";
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <130>;
            hold-while-undecided;
            //quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
        };
        hd: homerow_mods_default {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods default";
            #binding-cells = <2>;
            //flavor = "hold-preferred";
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <130>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <10 1>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <20 21>;
            bindings = <&kp TAB>;
        };
        COMBO(shiftablesch, &macro_shiftable_sch, 17 18, 0)
        // COMBO(UML_AE, &kp SQT , 11 12, 0)
        // COMBO(UML_OE, &kp SEMI, 12 13, 0)
        // COMBO(UML_UE, &kp LBKT, 10 11, 0)
        // COMBO(DE_SS, &kp MINUS, 18 19, 0)
    };

    macros {       
        snip: snip {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LSHFT &kp LEFT_GUI
                        &macro_tap &kp S
                        &macro_release &kp LSHIFT &kp LEFT_GUI>;
            label = "SNIP";
        };
        macro_shiftable_sch: macro_shiftable_sch {
            label = "Macro_shiftable_sch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                    &macro_tap &kp S
                    &macro_release &kp LSHIFT
                    &macro_tap &kp C &kp H
            >;
            tap-ms = <10>;
        };

        
    };

    keymap {
        compatible = "zmk,keymap";

        // This is a sample keymap intended to be replaced with your own

        Base {
            bindings = <
&kp P       &kp V        &kp K          &kp C           &kp SLASH   &kp NUHS   &kp H       &kp G       &kp F       &kp Q
&kp U       &hd LALT I   &hl LSHFT A    &hl LCTRL E     &kp O       &kp D       &hr LCTRL N &hr LSHFT R &hd LALT T  &kp S
&hd LGUI X  &kp Z        &kp Y          &kp L           &kp DOT     &kp COMMA   &kp M       &kp B       &kp W       &hd LGUI J 
                        &kp LGUI        &lt 1 SPACE   &lt 2 ENTER &lt 1 TAB   &lt 3 BSPC  &kp LALT
            >;
        };

        Num {
            bindings = <
&kp F1       &kp F2        &kp F3          &kp F4           &kp F5   &kp F6         &kp F7       &kp F8       &kp F9       &kp F10
&kp N1       &hd LALT N2   &hl LSHFT N3    &hl LCTRL N4     &kp N5   &kp N6         &hr LCTRL N7 &hr LSHFT N8 &hd LALT N9  &kp N0
&kp LS(NUHS) &kp RA(N7)    &kp RA(N8)       &kp LS(N8)        &kp FSLH &kp LS(FSLH)   &kp LS(N9)   &kp RA(N9)   &kp RA(N0)   &kp LS(N2) 
                            &trans   &trans  &trans  &trans   &trans   &trans
            >;
        };

        Nav {
            bindings = <
&kp TAB     &kp HOME     &kp UP        &kp END        &snip       &kp GRAVE    &kp LS(N2)          &kp LS(N4)          &kp RA(E)             &kp RA(NUBS)
&kp DEL     &kp LEFT     &kp DOWN      &kp RIGHT      &kp LC(S)    &kp LS(N0)   &hr LCTRL KP_PLUS  &hr LSHIFT KP_MINUS &hd LALT KP_MULTIPLY  &kp KP_SLASH
&kp LC(Y)   &kp LC(X)    &kp LC(C)     &kp LC(V)      &kp NUBS     &kp LS(NUBS) &kp LS(N7)          &kp RA(MINUS)       &kp RA(RBKT)          &tog 4
                         &trans        &trans         &trans       &trans       &trans              &trans
            >;
        };

        DE {
            bindings = <
&trans      &trans  &trans  &trans      &trans      &trans    &trans    &trans  &trans  &kp RA(Q)
&kp LBKT    &trans  &kp SQT &kp RA(E)   &kp SEMI    &trans    &trans    &trans  &trans  &kp MINUS
&trans      &trans  &trans  &trans      &trans      &trans    &trans          &trans  &trans  &trans
                    &trans  &trans      &trans      &trans          &trans          &trans
            >;
        };
        GAME {
            bindings = <
&kp TAB     &kp Q       &kp UP      &kp E       &kp R       &bt BT_CLR      &bt BT_SEL 0    &trans  &trans  &trans
&kp LSHIFT  &kp LEFT    &kp DOWN    &kp RIGHT   &kp F       &out OUT_BLE    &bt BT_SEL 1    &trans  &trans  &trans
&kp LCTRL   &kp X       &kp C       &kp V       &kp G       &out OUT_USB    &trans    &trans  &trans  &tog 4
                        &kp Y       &mo 1       &kp SPACE   &kp ENTER &trans    &trans
            >;
        };

    };
};
